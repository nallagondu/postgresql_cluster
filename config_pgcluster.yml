---
- name: config_pgcluster.yml | Configuration PostgreSQL HA Cluster (based on "Patroni" and "{{ dcs_type }}")
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars/main.yml
  vars:
    minimal_ansible_version: 2.7.0
    timescale_minimal_pg_version: 12 # if enable_timescale is defined
  tasks:
    - name: Checking ansible version
      fail:
        msg: "Ansible version must be {{ minimal_ansible_version }} or higher"
      when: ansible_version.full is version(minimal_ansible_version, '<')

    - name: Checking PostgreSQL version
      fail:
        msg:
          - "The current PostgreSQL version ({{ postgresql_version }}) is not supported by the TimescaleDB."
          - "PostgreSQL version must be {{ timescale_minimal_pg_version }} or higher."
      when:
        - enable_timescale is defined
        - enable_timescale | bool
        - postgresql_version|string is version(timescale_minimal_pg_version|string, '<')

- name: config_pgcluster.yml | Set maintenance variable
  hosts: all
  tasks:
    - name: Set variable
      set_fact:
        postgresql_cluster_maintenance: true
  tags: always

- name: config_pgcluster.yml | Gathering facts from all servers
  hosts: all
  gather_facts: true
  tags: always

- name: config_pgcluster.yml | Configure Postgres Cluster
  hosts: postgres_cluster
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  vars_files:
    - vars/main.yml
    - vars/system.yml

  pre_tasks:
    - name: Include OS-specific variables
      include_vars: "vars/{{ ansible_os_family }}.yml"
      when: not ansible_os_family == 'Rocky' and not ansible_os_family == 'AlmaLinux'
      tags: always

    # For compatibility with Ansible old versions
    # (support for RockyLinux and AlmaLinux has been added to Ansible 2.11)
    - name: Include OS-specific variables
      include_vars: "vars/RedHat.yml"
      when: ansible_os_family == 'Rocky' or ansible_os_family == 'AlmaLinux'
      tags: always

    - name: Checking Linux distribution
      fail:
        msg: "{{ ansible_distribution }} is not supported"
      when: ansible_distribution not in os_valid_distributions

    - name: Checking version of OS Linux
      fail:
        msg: "{{ ansible_distribution_version }} of {{ ansible_distribution }} is not supported"
      when: ansible_distribution_version is version_compare(os_minimum_versions[ansible_distribution], '<')

    - name: Update apt cache
      apt:
        update_cache: true
        cache_valid_time: 3600
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      environment: "{{ proxy_env | default({}) }}"
      when: ansible_os_family == "Debian" and installation_method == "repo"
      tags: add_repo, install_packages, install_postgres

    - name: Make sure the gnupg and apt-transport-https packages are present
      apt:
        pkg:
          - gnupg
          - apt-transport-https
        state: present
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      environment: "{{ proxy_env | default({}) }}"
      when: ansible_os_family == "Debian" and installation_method == "repo"
      tags: add_repo, install_packages, install_postgres

    - name: Build a firewall_ports_dynamic_var
      set_fact:
        firewall_ports_dynamic_var: "{{ firewall_ports_dynamic_var | default([]) + (firewall_allowed_tcp_ports_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when: firewall_enabled_at_boot|bool
      tags: config_firewall, firewall

    - name: Build a firewall_rules_dynamic_var
      set_fact:
        firewall_rules_dynamic_var: "{{ firewall_rules_dynamic_var | default([]) + (firewall_additional_rules_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when: firewall_enabled_at_boot|bool
      tags: firewall

  roles:
    - role: ansible-role-firewall
      environment: "{{ proxy_env | default({}) }}"
      vars:
        firewall_allowed_tcp_ports: "{{ firewall_ports_dynamic_var | default([]) | unique }}"
        firewall_additional_rules: "{{ firewall_rules_dynamic_var | default([]) | unique }}"
      when: firewall_enabled_at_boot|bool
      tags: firewall

    - role: hostname
    - role: resolv_conf
    - role: etc_hosts
    - role: add-repository
    - role: packages
    - role: sudo
    - role: swap
    - role: sysctl
    - role: pam_limits
    - role: locales
    - role: timezone
    - role: ntp
    - role: ssh-keys
    - role: copy

- name: config_pgcluster.yml | Configure HAProxy Load Balancing
  import_playbook: balancers.yml
  when: with_haproxy_load_balancing|bool
  tags: config_balancers,load_balancing, haproxy

- name: config_pgcluster.yml | Configure Postgres Cluster
  hosts: postgres_cluster
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  handlers:
    - import_tasks: roles/patroni/handlers/main.yml
    - import_tasks: roles/pgbouncer/handlers/main.yml
  vars_files:
    - vars/main.yml
    - vars/system.yml

  pre_tasks:
    - name: Include OS-specific variables
      include_vars: "vars/{{ ansible_os_family }}.yml"
      when: not ansible_os_family == 'Rocky' and not ansible_os_family == 'AlmaLinux'
      tags: always

    # For compatibility with Ansible old versions
    # (support for RockyLinux and AlmaLinux has been added to Ansible 2.11)
    - name: Include OS-specific variables
      include_vars: "vars/RedHat.yml"
      when: ansible_os_family == 'Rocky' or ansible_os_family == 'AlmaLinux'
      tags: always

    # timescaledb (if enable_timescale is defined)
    - block:
        - name: Ensure 'timescaledb' is in 'shared_preload_libraries'
          set_fact:
            # This complex line does several things:
            # 1. It takes the current list of PostgreSQL parameters,
            # 2. Removes any item where the option is 'shared_preload_libraries',
            # 3. Then appends a new 'shared_preload_libraries' item at the end.
            # The new value of this item is based on whether 'timescaledb' is already present in the old value.
            # If it is not present, it appends ',timescaledb' to the old value. Otherwise, it leaves the value unchanged.
            postgresql_parameters: >-
              {{ postgresql_parameters | rejectattr('option', 'equalto', 'shared_preload_libraries') | list
              + [{ 'option': 'shared_preload_libraries', 'value': new_value }] }}
          vars:
            # Find the last item in postgresql_parameters where the option is 'shared_preload_libraries'
            shared_preload_libraries_item: "{{ postgresql_parameters | selectattr('option', 'equalto', 'shared_preload_libraries') | list | last | default({ 'value': '' }) }}"
            # Determine the new value based on whether 'timescaledb' is already present
            new_value: >-
              {{
                (shared_preload_libraries_item.value ~ (',' if shared_preload_libraries_item.value else '')
                if 'timescaledb' not in shared_preload_libraries_item.value.split(',') else shared_preload_libraries_item.value)
                ~ ('timescaledb' if 'timescaledb' not in shared_preload_libraries_item.value.split(',') else '')
              }}
      when:
        - installation_method == "repo"
        - enable_timescale is defined
        - enable_timescale | bool
      tags: always

  roles:
    - role: pgpass

    - role: cron

    - role: patroni/config

    - role: vip-manager
      when: not with_haproxy_load_balancing|bool and
        (cluster_vip is defined and cluster_vip | length > 0)

    # optional
    - role: postgresql-users
      when: is_master == "true" and postgresql_users | length > 0

    - role: postgresql-databases
      when: is_master == "true" and postgresql_databases | length > 0

    - role: postgresql-schemas
      when: is_master == "true" and postgresql_schemas | length > 0

    - role: postgresql-extensions
      when: is_master == "true" and postgresql_extensions | length > 0

    - role: pgbouncer/config
      when: pgbouncer_install|bool and pgbouncer_generate_userlist|bool

- name: config_pgcluster.yml | Check needed restart cluster and prepare for it
  hosts: postgres_cluster
  gather_facts: true
  become: true
  become_method: sudo
  any_errors_fatal: true
  vars_files:
    - vars/main.yml
  tasks:
    - name: "[Prepare] Get Patroni Cluster Leader Node"
      uri:
        url: http://{{ inventory_hostname }}:{{ patroni_restapi_port }}/leader
        status_code: 200
      register: patroni_leader_result
      changed_when: false
      failed_when: false

    - name: '[Prepare] Add host to group "primary" (in-memory inventory)'
      add_host:
        name: "{{ item }}"
        groups: primary
      when: hostvars[item]['patroni_leader_result']['status'] == 200
      loop: "{{ groups['postgres_cluster'] }}"
      changed_when: false

    - name: '[Prepare] Add hosts to group "secondary" (in-memory inventory)'
      add_host:
        name: "{{ item }}"
        groups: secondary
      when: hostvars[item]['patroni_leader_result']['status'] != 200
      loop: "{{ groups['postgres_cluster'] }}"
      changed_when: false

    - name: "Print Patroni Cluster info"
      debug:
        msg:
          - "Cluster Name: {{ patroni_cluster_name }}"
          - "Cluster Leader: {{ ansible_hostname }}"
      when: inventory_hostname in groups['primary']

    - name: "Check if there are any changed parameters that require a restart"
      become_user: postgres
      postgresql_query:
        login_host: "127.0.0.1"
        login_port: "{{ postgresql_port }}"
        login_user: "{{ patroni_superuser_username }}"
        login_password: "{{ patroni_superuser_password }}"
        login_db: "postgres"
        query: "select name from pg_settings where pending_restart is true"
      register: pending_restart_result

    - name: "Set pg_pending_restart_settings variable"
      set_fact:
        pg_pending_restart_settings: "{{ pending_restart_result.query_result }}"

    - name: "Display parameters requiring PostgreSQL restart"
      debug:
        msg:
          - "On server {{ ansible_hostname }}, the following parameters have changed and require PostgreSQL to restart:"
          - "{{ pg_pending_restart_settings | map(attribute='name') | list }}"
      when: pg_pending_restart_settings | length > 0
  tags:
    - patroni_conf

- name: config_pgcluster.yml | Restart patroni on secondary after config settings if need
  hosts: secondary
  serial: 1 # restart replicas one by one
  gather_facts: false
  become: true
  become_method: sudo
  any_errors_fatal: true
  vars_files:
    - vars/main.yml
  pre_tasks:
    - name: Include OS-specific variables
      include_vars: "vars/{{ ansible_os_family }}.yml"
      when: not ansible_os_family == 'Rocky' and not ansible_os_family == 'AlmaLinux'
      tags: always

    # For compatibility with Ansible old versions
    # (support for RockyLinux and AlmaLinux has been added to Ansible 2.11)
    - name: Include OS-specific variables
      include_vars: "vars/RedHat.yml"
      when: ansible_os_family == 'Rocky' or ansible_os_family == 'AlmaLinux'
      tags: always
  tasks:
    - name: Stop read-only traffic
      include_role:
        name: update
        tasks_from: stop_traffic
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

    - name: Stop Services
      include_role:
        name: update
        tasks_from: stop_services
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

    - name: Start Services
      include_role:
        name: update
        tasks_from: start_services
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

    - name: Start read-only traffic
      include_role:
        name: update
        tasks_from: start_traffic
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0
  tags:
    - patroni_conf

- name: config_pgcluster.yml | Restart patroni on master after config settings if need
  hosts: primary
  gather_facts: false
  become: true
  become_method: sudo
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"
  vars_files:
    - vars/main.yml
  pre_tasks:
    - name: Include OS-specific variables
      include_vars: "vars/{{ ansible_os_family }}.yml"
      when: not ansible_os_family == 'Rocky' and not ansible_os_family == 'AlmaLinux'
      tags: always

    # For compatibility with Ansible old versions
    # (support for RockyLinux and AlmaLinux has been added to Ansible 2.11)
    - name: Include OS-specific variables
      include_vars: "vars/RedHat.yml"
      when: ansible_os_family == 'Rocky' or ansible_os_family == 'AlmaLinux'
      tags: always
  tasks:
    - name: Switchover Patroni leader role
      include_role:
        name: update
        tasks_from: switchover
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

    - name: Stop read-only traffic
      include_role:
        name: update
        tasks_from: stop_traffic
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

    - name: Stop Services
      include_role:
        name: update
        tasks_from: stop_services
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

    - name: Start Services
      include_role:
        name: update
        tasks_from: start_services
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

    - name: Start read-only traffic
      include_role:
        name: update
        tasks_from: start_traffic
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0
  tags:
    - patroni_conf
