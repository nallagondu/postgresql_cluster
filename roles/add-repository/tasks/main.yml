---

- block:  # Debian/Ubuntu
    - name: Add repository apt-key
      ansible.builtin.apt_key:
        url: "{{ item.key }}"
        state: present
      loop: "{{ apt_repository_keys }}"
      when: apt_repository_keys | length > 0

    - name: Add repository
      ansible.builtin.apt_repository:
        repo: "{{ item.repo }}"
        state: present
        update_cache: true
      loop: "{{ apt_repository }}"
      when: apt_repository | length > 0
  environment: "{{ proxy_env | default({}) }}"
  when: installation_method == "repo" and ansible_os_family == "Debian"
  tags: add_repo

- block:  # RedHat/CentOS
    - name: Add repository GPG key
      ansible.builtin.command: "rpm --import https://repo.almalinux.org/almalinux/RPM-GPG-KEY-AlmaLinux-{{ ansible_distribution_major_version }}"
      when: ansible_distribution == "AlmaLinux"

    - name: Add repository
      ansible.builtin.yum_repository:
        name: "{{ item.name }}"
        description: "{{ item.description }}"
        baseurl: "{{ item.baseurl }}"
        gpgkey: "{{ item.gpgkey }}"
        gpgcheck: "{{ item.gpgcheck }}"
      loop: "{{ yum_repository | flatten(1) }}"
      when: yum_repository | length > 0

    # Install Epel Repository
    - name: Get epel-release-latest rpm package
      ansible.builtin.get_url:
        url: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
        dest: /tmp/
        timeout: 30
        validate_certs: false
      when: install_epel_repo|bool
      tags: install_epel_repo

    - name: Install EPEL repository
      ansible.builtin.package:
        name: "/tmp/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
        state: present
        disable_gpg_check: true
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      when: install_epel_repo|bool
      tags: install_epel_repo

    # Add repository to install dependencies for postgresql<version>-devel package
    - block:
        # PowerTools repository
        - name: Enable PowerTools repository
          ansible.builtin.command: dnf config-manager --set-enabled "[Pp]ower[Tt]ools"
          when:
            - ansible_distribution_major_version is version('8', '==')
            - ansible_distribution != "OracleLinux"
            - ansible_distribution != 'RedHat'

        # CodeReady Linux Builder (crb) repository
        - name: Enable CodeReady Linux Builder (crb) repository
          ansible.builtin.command: dnf config-manager --set-enabled crb
          when:
            - ansible_distribution_major_version is version('9', '>=')
            - ansible_distribution != "OracleLinux"

        # CodeReady Builder repository for OracleLinux
        - name: Enable CodeReady Builder repository
          ansible.builtin.command: dnf config-manager --enable ol{{ ansible_distribution_major_version }}_codeready_builder
          when:
            - ansible_distribution == "OracleLinux"
            - ansible_distribution_major_version is version('8', '>=')
      vars:
        pg_devel_package: "postgresql{{ postgresql_version | replace('.', '') }}-devel"
      when:
        - pg_devel_package in postgresql_packages

    # Install PostgreSQL Repository
    - name: Get pgdg-redhat-repo-latest.noarch.rpm
      ansible.builtin.get_url:
        url: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-{{ ansible_distribution_major_version }}-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
        dest: /tmp/
        timeout: 30
        validate_certs: false
      when: install_postgresql_repo|bool
      tags: install_postgresql_repo

    - name: Install PostgreSQL repository
      ansible.builtin.package:
        name: /tmp/pgdg-redhat-repo-latest.noarch.rpm
        state: present
        disable_gpg_check: true
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      when: install_postgresql_repo|bool
      tags: install_postgresql_repo
  environment: "{{ proxy_env | default({}) }}"
  when: installation_method == "repo" and ansible_os_family == "RedHat"
  tags: add_repo

# timescaledb (if enable_timescale is defined)
- block:
    # Debian based
    - name: Add TimescaleDB repository apt-key
      ansible.builtin.apt_key:
        url: "https://packagecloud.io/timescale/timescaledb/gpgkey"
        state: present
      when: ansible_os_family == "Debian"

    - name: Add TimescaleDB repository
      ansible.builtin.apt_repository:
        repo: "deb https://packagecloud.io/timescale/timescaledb/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} main"
        state: present
        update_cache: true
      when: ansible_os_family == "Debian"

    # RedHat based
    - name: Add TimescaleDB repository
      ansible.builtin.yum_repository:
        name: "timescale_timescaledb"
        description: "timescaledb repo"
        baseurl: "https://packagecloud.io/timescale/timescaledb/el/{{ ansible_distribution_major_version }}/x86_64"
        gpgkey: "https://packagecloud.io/timescale/timescaledb/gpgkey"
        gpgcheck: "no"
      when: ansible_os_family == "RedHat"
  environment: "{{ proxy_env | default({}) }}"
  when:
    - installation_method == "repo"
    - enable_timescale is defined
    - enable_timescale | bool
  tags: add_repo

...
