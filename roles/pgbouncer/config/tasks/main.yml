---
- name: Ensure config directory "{{ pgbouncer_conf_dir }}" exist
  file:
    path: "{{ pgbouncer_conf_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 0750
  tags: pgbouncer, pgbouncer_conf

# This task calculates the defined_pool_size for each defined pgbouncer pool.
# The pool size for each pool is extracted from its 'pool_parameters' string using a regular expression.
# If 'pool_size' is defined in 'pool_parameters', it takes that value.
# If 'pool_size' is not defined, it uses pgbouncer_default_pool_size if available, otherwise 0.
# The calculated pool size is then added to the total 'defined_pool_size'.
- name: Calculate pool_size
  set_fact:
    defined_pool_size: "{{ defined_pool_size|default(0)|int + (item.pool_parameters|regex_search('pool_size=(\\d+)', multiline=False)|regex_replace('[^0-9]', '')|default(pgbouncer_default_pool_size|default(0), true)|int) }}"
  loop: "{{ pgbouncer_pools|default([]) }}"
  tags: pgbouncer_conf, pgbouncer

# This task calculates the total pool size across all databases.
# If 'postgresql_databases' is not defined or is an empty list, the total pool size will be equal to the 'defined_pool_size'.
# Otherwise, it adds the 'defined_pool_size' to the product of the default pool size (or 0 if not defined) and the number of databases not already defined in 'pgbouncer_pools'.
# This means it checks the 'postgresql_databases' against 'pgbouncer_pools' and for each database that does not have a corresponding pool, it adds the 'pgbouncer_default_pool_size' (or 0 if not defined) to the 'defined_pool_size'.
- name: Calculate total_pool_size
  set_fact:
    total_pool_size: >-
      {{
        (defined_pool_size|int)
        if (postgresql_databases is not defined or postgresql_databases|default([]) == [])
        else
        ((defined_pool_size|int)
        +
        (postgresql_databases|default([]) | rejectattr('db', 'in', pgbouncer_pools|map(attribute='dbname')|list)|length) * (pgbouncer_default_pool_size|default(0)|int))
      }}
  tags: pgbouncer_conf, pgbouncer

- name: Show total pool size
  run_once: true
  debug:
    var: total_pool_size
  tags: pgbouncer_conf, pgbouncer

# This task sets the value for max_connections from the provided variables, defaulting to 100 if not explicitly set.
# It loops through the 'postgresql_parameters' list and, if 'max_connections' is found in the option, it sets the 'max_connections' value accordingly.
- name: Set max_connections from vars or use default
  set_fact:
    max_connections: "{{ (item.value|default(100))|int }}"
  when: item.option == "max_connections"
  loop: "{{ postgresql_parameters|default([]) }}"
  tags: pgbouncer_conf, pgbouncer

# This task fails the playbook execution if the total pool size is greater than max_connections.
# It checks if 'pgbouncer_pools' is defined and has length > 0 and whether the total pool size is greater than max_connections.
# If both conditions are met, the execution is stopped with a message indicating that the settings need to be changed.
- name: Failed when total_pool_size > max_connections
  fail:
    msg: "total_pool_size: {{ total_pool_size  }} > max_connections: {{ max_connections }}. Need change settings"
  when: pgbouncer_pools|default([]) | length > 0 and total_pool_size | int > max_connections | default(100) | int
  tags: pgbouncer_conf, pgbouncer

- name: Update pgbouncer.ini
  template:
    src: ../templates/pgbouncer.ini.j2
    dest: "{{ pgbouncer_conf_dir }}/pgbouncer.ini"
    owner: postgres
    group: postgres
    mode: 0640
  notify: "restart pgbouncer"
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: pgbouncer, pgbouncer_conf

- name: Get users and password md5 from pg_shadow
  run_once: true
  become: true
  become_user: postgres
  command: >
    {{ postgresql_bin_dir }}/psql -p {{ postgresql_port }} -U {{ patroni_superuser_username }} -d postgres -Atq
    -c "SELECT concat('\"', usename, '\" \"', passwd, '\"') FROM pg_shadow where usename != '{{ patroni_replication_username }}'"
  register: pg_shadow_result
  changed_when: false
  delegate_to: "{{ groups.master[0] }}"
  when: pgbouncer_generate_userlist|bool
  tags: pgbouncer, pgbouncer_generate_userlist

- name: Generate /etc/pgbouncer/userlist.txt
  become: true
  become_user: postgres
  copy:
    content: |
      {{ pg_shadow_result.stdout }}

    dest: /etc/pgbouncer/userlist.txt
  notify: "reload pgbouncer"
  when:
    - pg_shadow_result.rc == 0
    - pg_shadow_result.stdout is defined
    - pg_shadow_result.stdout | length > 0
    - pgbouncer_generate_userlist|bool
  tags: pgbouncer, pgbouncer_generate_userlist

...
