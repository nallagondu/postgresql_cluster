---

- name: Install pgbouncer package
  package:
    name: pgbouncer
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  environment: "{{ proxy_env | default({}) }}"
  when: ansible_os_family == "Debian" or
        (ansible_os_family == "RedHat" and
        ansible_distribution_major_version == '7')
  tags: pgbouncer_install, pgbouncer

# RHEL 8
- name: Install pgbouncer package
  dnf:
    name: pgbouncer
    disablerepo: AppStream
  environment: "{{ proxy_env | default({}) }}"
  when: ansible_os_family == "RedHat" and
        ansible_distribution_major_version >= '8'
  tags: pgbouncer_install, pgbouncer

- name: Ensure config directory "{{ pgbouncer_conf_dir }}" exist
  file:
    path: "{{ pgbouncer_conf_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 0750
  tags: pgbouncer_conf, pgbouncer

- name: Stop and disable standard init script
  service:
    name: pgbouncer
    state: stopped
    enabled: false
  when: ansible_os_family == "Debian"
  tags: pgbouncer_service, pgbouncer

- name: Copy systemd service file
  template:
    src: templates/pgbouncer.service.j2
    dest: /etc/systemd/system/pgbouncer.service
    owner: postgres
    group: postgres
    mode: 0644
  notify: "restart pgbouncer"
  tags: pgbouncer_service, pgbouncer

- block:  # workaround for pgbouncer from postgrespro repo
    - name: Check that /usr/bin/pgbouncer is exists
      stat:
        path: /usr/bin/pgbouncer
      register: pgbouncer_bin

    - name: create a symlink to /usr/sbin/pgbouncer
      file:
        src: /usr/sbin/pgbouncer
        dest: /usr/bin/pgbouncer
        owner: root
        group: root
        state: link
      when: not pgbouncer_bin.stat.exists
  when: ansible_os_family == "RedHat" and
        postgresql_packages|join(" ") is search("postgrespro")
  tags: pgbouncer_service, pgbouncer

- name: Enable log rotation with logrotate
  copy:
    content: |
      /var/log/pgbouncer/pgbouncer.log {
             daily
             rotate 7
             copytruncate
             delaycompress
             compress
             notifempty
             missingok
             su root root
      }
    dest: /etc/logrotate.d/pgbouncer
  tags: pgbouncer_logrotate, pgbouncer

# This task calculates the defined_pool_size for each defined pgbouncer pool.
# The pool size for each pool is extracted from its 'pool_parameters' string using a regular expression.
# If 'pool_size' is defined in 'pool_parameters', it takes that value.
# If 'pool_size' is not defined, it uses pgbouncer_default_pool_size if available, otherwise 0.
# The calculated pool size is then added to the total 'defined_pool_size'.
- name: Calculate pool_size
  set_fact:
    defined_pool_size: "{{ defined_pool_size|default(0)|int + (item.pool_parameters|regex_search('pool_size=(\\d+)', multiline=False)|regex_replace('[^0-9]', '')|default(pgbouncer_default_pool_size|default(0), true)|int) }}"
  loop: "{{ pgbouncer_pools|default([]) }}"
  tags: pgbouncer_conf, pgbouncer

# This task calculates the total pool size across all databases.
# If 'postgresql_databases' is not defined or is an empty list, the total pool size will be equal to the 'defined_pool_size'.
# Otherwise, it adds the 'defined_pool_size' to the product of the default pool size (or 0 if not defined) and the number of databases not already defined in 'pgbouncer_pools'.
# This means it checks the 'postgresql_databases' against 'pgbouncer_pools' and for each database that does not have a corresponding pool, it adds the 'pgbouncer_default_pool_size' (or 0 if not defined) to the 'defined_pool_size'.
- name: Calculate total_pool_size
  set_fact:
    total_pool_size: >-
      {{
        (defined_pool_size|int)
        if (postgresql_databases is not defined or postgresql_databases|default([]) == [])
        else
        ((defined_pool_size|int)
        +
        (postgresql_databases|default([]) | rejectattr('db', 'in', pgbouncer_pools|map(attribute='dbname')|list)|length) * (pgbouncer_default_pool_size|default(0)|int))
      }}
  tags: pgbouncer_conf, pgbouncer

- name: Show total pool size
  run_once: true
  debug:
    var: total_pool_size
  tags: pgbouncer_conf, pgbouncer

# This task sets the value for max_connections from the provided variables, defaulting to 100 if not explicitly set.
# It loops through the 'postgresql_parameters' list and, if 'max_connections' is found in the option, it sets the 'max_connections' value accordingly.
- name: Set max_connections from vars or use default
  set_fact:
    max_connections: "{{ (item.value|default(100))|int }}"
  when: item.option == "max_connections"
  loop: "{{ postgresql_parameters|default([]) }}"
  tags: pgbouncer_conf, pgbouncer

# This task fails the playbook execution if the total pool size is greater than max_connections.
# It checks if 'pgbouncer_pools' is defined and has length > 0 and whether the total pool size is greater than max_connections.
# If both conditions are met, the execution is stopped with a message indicating that the settings need to be changed.
- name: Failed when total_pool_size > max_connections
  fail:
    msg: "total_pool_size: {{ total_pool_size  }} > max_connections: {{ max_connections }}. Need change settings"
  when: pgbouncer_pools|default([]) | length > 0 and total_pool_size | int > max_connections | default(100) | int
  tags: pgbouncer_conf, pgbouncer

- name: Configure pgbouncer.ini
  template:
    src: templates/pgbouncer.ini.j2
    dest: "{{ pgbouncer_conf_dir }}/pgbouncer.ini"
    owner: postgres
    group: postgres
    mode: 0640
  notify: "restart pgbouncer"
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: pgbouncer_conf, pgbouncer

- name: Create userlist.txt
  template:
    src: templates/userlist.txt.j2
    dest: "{{ pgbouncer_conf_dir }}/userlist.txt"
    owner: postgres
    group: postgres
    mode: 0640
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: pgbouncer

- block:  # for add_pgnode.yml
    - name: Fetch pgbouncer.ini and userlist.txt conf files from master
      run_once: true
      fetch:
        src: "{{ item }}"
        dest: files/
        validate_checksum: true
        flat: true
      loop:
        - /etc/pgbouncer/pgbouncer.ini
        - /etc/pgbouncer/userlist.txt
      delegate_to: "{{ groups.master[0] }}"

    - name: Copy pgbouncer.ini and userlist.txt conf files to replica
      copy:
        src: "files/{{ item }}"
        dest: /etc/pgbouncer/
        owner: postgres
        group: postgres
        mode: 0640
      loop:
        - pgbouncer.ini
        - userlist.txt

    - name: Remove pgbouncer.ini and userlist.txt conf files from localhost
      run_once: true
      file:
        path: "files/{{ item }}"
        state: absent
      loop:
        - pgbouncer.ini
        - userlist.txt
      delegate_to: localhost

    - name: Prepare pgbouncer.ini conf file (replace "listen_addr")
      lineinfile:
        path: /etc/pgbouncer/pgbouncer.ini
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backrefs: true
      loop:
        - { regexp: '^listen_addr =', line: 'listen_addr = {{ hostvars[inventory_hostname].inventory_hostname }}' }
      loop_control:
        label: "{{ item.line }}"
      notify: "restart pgbouncer"
      when: with_haproxy_load_balancing|bool or
            (cluster_vip is not defined or cluster_vip | length < 1)

    - name: Prepare pgbouncer.ini conf file (replace "listen_addr")
      lineinfile:
        path: /etc/pgbouncer/pgbouncer.ini
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backrefs: true
      loop:
        - { regexp: '^listen_addr =', line: 'listen_addr = {{ hostvars[inventory_hostname].inventory_hostname }},{{ cluster_vip }}' }
      loop_control:
        label: "{{ item.line }}"
      notify: "restart pgbouncer"
      when: not with_haproxy_load_balancing|bool and (cluster_vip is defined and cluster_vip | length > 0 )
  when: existing_pgcluster is defined and existing_pgcluster|bool
  tags: pgbouncer_conf, pgbouncer

...
